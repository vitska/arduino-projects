   1               		.file	"LCD_baomei_bm-8001b.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.global	SPI_Send
   9               		.type	SPI_Send, @function
  10               	SPI_Send:
  11               	/* prologue: function */
  12               	/* frame size = 0 */
  13               	/* stack size = 0 */
  14               	.L__stack_usage = 0
  15 0000 6150      		subi r22,lo8(-(-1))
  16 0002 90E0      		ldi r25,0
  17               	.L2:
  18 0004 67FD      		sbrc r22,7
  19 0006 00C0      		rjmp .L7
  20 0008 2898      		cbi 0x5,0
  21 000a 9C01      		movw r18,r24
  22 000c 062E      		mov r0,r22
  23 000e 00C0      		rjmp 2f
  24               		1:
  25 0010 3595      		asr r19
  26 0012 2795      		ror r18
  27               		2:
  28 0014 0A94      		dec r0
  29 0016 02F4      		brpl 1b
  30 0018 20FF      		sbrs r18,0
  31 001a 00C0      		rjmp .L3
  32 001c 5F9A      		sbi 0xb,7
  33 001e 00C0      		rjmp .L4
  34               	.L3:
  35 0020 5F98      		cbi 0xb,7
  36               	.L4:
  37 0022 289A      		sbi 0x5,0
  38 0024 6150      		subi r22,lo8(-(-1))
  39 0026 00C0      		rjmp .L2
  40               	.L7:
  41               	/* epilogue start */
  42 0028 0895      		ret
  43               		.size	SPI_Send, .-SPI_Send
  44               	.global	LCD_Init
  45               		.type	LCD_Init, @function
  46               	LCD_Init:
  47 002a 0F93      		push r16
  48 002c 1F93      		push r17
  49 002e CF93      		push r28
  50 0030 DF93      		push r29
  51               	/* prologue: function */
  52               	/* frame size = 0 */
  53               	/* stack size = 4 */
  54               	.L__stack_usage = 4
  55 0032 219A      		sbi 0x4,1
  56 0034 579A      		sbi 0xa,7
  57 0036 209A      		sbi 0x4,0
  58 0038 C0E0      		ldi r28,lo8(init)
  59 003a D0E0      		ldi r29,hi8(init)
  60               	.L9:
  61 003c 2998      		cbi 0x5,1
  62 003e 64E0      		ldi r22,lo8(4)
  63 0040 88E0      		ldi r24,lo8(8)
  64 0042 0E94 0000 		call SPI_Send
  65 0046 FE01      		movw r30,r28
  66               	/* #APP */
  67               	 ;  57 "src/LCD_baomei_bm-8001b.c" 1
  68 0048 8491      		lpm r24, Z
  69               		
  70               	 ;  0 "" 2
  71               	/* #NOAPP */
  72 004a 68E0      		ldi r22,lo8(8)
  73 004c 0E94 0000 		call SPI_Send
  74 0050 299A      		sbi 0x5,1
  75 0052 2196      		adiw r28,1
  76 0054 F0E0      		ldi r31,hi8(init+8)
  77 0056 C030      		cpi r28,lo8(init+8)
  78 0058 DF07      		cpc r29,r31
  79 005a 01F4      		brne .L9
  80 005c 2998      		cbi 0x5,1
  81 005e 63E0      		ldi r22,lo8(3)
  82 0060 85E0      		ldi r24,lo8(5)
  83 0062 0E94 0000 		call SPI_Send
  84 0066 66E0      		ldi r22,lo8(6)
  85 0068 80E0      		ldi r24,0
  86 006a 0E94 0000 		call SPI_Send
  87 006e 00E0      		ldi r16,lo8(data)
  88 0070 10E0      		ldi r17,hi8(data)
  89 0072 C1E1      		ldi r28,lo8(17)
  90               	.L10:
  91 0074 C150      		subi r28,lo8(-(-1))
  92 0076 01F0      		breq .L13
  93 0078 68E0      		ldi r22,lo8(8)
  94 007a F801      		movw r30,r16
  95 007c 8191      		ld r24,Z+
  96 007e 8F01      		movw r16,r30
  97 0080 0E94 0000 		call SPI_Send
  98 0084 00C0      		rjmp .L10
  99               	.L13:
 100 0086 299A      		sbi 0x5,1
 101 0088 5F9A      		sbi 0xb,7
 102               	/* epilogue start */
 103 008a DF91      		pop r29
 104 008c CF91      		pop r28
 105 008e 1F91      		pop r17
 106 0090 0F91      		pop r16
 107 0092 0895      		ret
 108               		.size	LCD_Init, .-LCD_Init
 109               	.global	LCD_Update
 110               		.type	LCD_Update, @function
 111               	LCD_Update:
 112 0094 CF93      		push r28
 113 0096 DF93      		push r29
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 2 */
 117               	.L__stack_usage = 2
 118 0098 2998      		cbi 0x5,1
 119 009a 63E0      		ldi r22,lo8(3)
 120 009c 85E0      		ldi r24,lo8(5)
 121 009e 0E94 0000 		call SPI_Send
 122 00a2 66E0      		ldi r22,lo8(6)
 123 00a4 80E0      		ldi r24,0
 124 00a6 0E94 0000 		call SPI_Send
 125 00aa C0E0      		ldi r28,lo8(data)
 126 00ac D0E0      		ldi r29,hi8(data)
 127               	.L15:
 128 00ae 68E0      		ldi r22,lo8(8)
 129 00b0 8991      		ld r24,Y+
 130 00b2 0E94 0000 		call SPI_Send
 131 00b6 80E0      		ldi r24,hi8(data+16)
 132 00b8 C030      		cpi r28,lo8(data+16)
 133 00ba D807      		cpc r29,r24
 134 00bc 01F4      		brne .L15
 135 00be 299A      		sbi 0x5,1
 136               	/* epilogue start */
 137 00c0 DF91      		pop r29
 138 00c2 CF91      		pop r28
 139 00c4 0895      		ret
 140               		.size	LCD_Update, .-LCD_Update
 141               	.global	limit_min_max
 142               		.type	limit_min_max, @function
 143               	limit_min_max:
 144               	/* prologue: function */
 145               	/* frame size = 0 */
 146               	/* stack size = 0 */
 147               	.L__stack_usage = 0
 148 00c6 8617      		cp r24,r22
 149 00c8 04F4      		brge .L18
 150 00ca 862F      		mov r24,r22
 151               	.L18:
 152 00cc 8417      		cp r24,r20
 153 00ce 04F4      		brge .L19
 154 00d0 482F      		mov r20,r24
 155               	.L19:
 156 00d2 842F      		mov r24,r20
 157 00d4 0895      		ret
 158               		.size	limit_min_max, .-limit_min_max
 159               	.global	TrimRudder
 160               		.type	TrimRudder, @function
 161               	TrimRudder:
 162               	/* prologue: function */
 163               	/* frame size = 0 */
 164               	/* stack size = 0 */
 165               	.L__stack_usage = 0
 166 00d6 E82F      		mov r30,r24
 167 00d8 8091 0000 		lds r24,data+11
 168 00dc 9091 0000 		lds r25,data+11+1
 169 00e0 8078      		andi r24,128
 170 00e2 9F70      		andi r25,15
 171 00e4 E530      		cpi r30,lo8(5)
 172 00e6 04F0      		brlt .L21
 173 00e8 E5E0      		ldi r30,lo8(5)
 174               	.L21:
 175 00ea 0E2E      		mov __tmp_reg__,r30
 176 00ec 000C      		lsl r0
 177 00ee FF0B      		sbc r31,r31
 178 00f0 E050      		subi r30,lo8(-(bits+16))
 179 00f2 F040      		sbci r31,hi8(-(bits+16))
 180               	/* #APP */
 181               	 ;  137 "src/LCD_baomei_bm-8001b.c" 1
 182 00f4 E491      		lpm r30, Z
 183               		
 184               	 ;  0 "" 2
 185               	/* #NOAPP */
 186 00f6 21E0      		ldi r18,lo8(1)
 187 00f8 30E0      		ldi r19,0
 188 00fa 00C0      		rjmp 2f
 189               		1:
 190 00fc 220F      		lsl r18
 191 00fe 331F      		rol r19
 192               		2:
 193 0100 EA95      		dec r30
 194 0102 02F4      		brpl 1b
 195 0104 822B      		or r24,r18
 196 0106 932B      		or r25,r19
 197 0108 9093 0000 		sts data+11+1,r25
 198 010c 8093 0000 		sts data+11,r24
 199 0110 0895      		ret
 200               		.size	TrimRudder, .-TrimRudder
 201               	.global	TrimThrottle
 202               		.type	TrimThrottle, @function
 203               	TrimThrottle:
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 0 */
 207               	.L__stack_usage = 0
 208 0112 E82F      		mov r30,r24
 209 0114 8091 0000 		lds r24,data+14
 210 0118 9091 0000 		lds r25,data+14+1
 211 011c 887F      		andi r24,248
 212 011e 9927      		clr r25
 213 0120 E530      		cpi r30,lo8(5)
 214 0122 04F0      		brlt .L24
 215 0124 E5E0      		ldi r30,lo8(5)
 216               	.L24:
 217 0126 0E2E      		mov __tmp_reg__,r30
 218 0128 000C      		lsl r0
 219 012a FF0B      		sbc r31,r31
 220 012c E050      		subi r30,lo8(-(bits+5))
 221 012e F040      		sbci r31,hi8(-(bits+5))
 222               	/* #APP */
 223               	 ;  143 "src/LCD_baomei_bm-8001b.c" 1
 224 0130 E491      		lpm r30, Z
 225               		
 226               	 ;  0 "" 2
 227               	/* #NOAPP */
 228 0132 21E0      		ldi r18,lo8(1)
 229 0134 30E0      		ldi r19,0
 230 0136 00C0      		rjmp 2f
 231               		1:
 232 0138 220F      		lsl r18
 233 013a 331F      		rol r19
 234               		2:
 235 013c EA95      		dec r30
 236 013e 02F4      		brpl 1b
 237 0140 822B      		or r24,r18
 238 0142 932B      		or r25,r19
 239 0144 9093 0000 		sts data+14+1,r25
 240 0148 8093 0000 		sts data+14,r24
 241 014c 0895      		ret
 242               		.size	TrimThrottle, .-TrimThrottle
 243               	.global	TrimElev
 244               		.type	TrimElev, @function
 245               	TrimElev:
 246               	/* prologue: function */
 247               	/* frame size = 0 */
 248               	/* stack size = 0 */
 249               	.L__stack_usage = 0
 250 014e E82F      		mov r30,r24
 251 0150 8091 0000 		lds r24,data+3
 252 0154 9091 0000 		lds r25,data+3+1
 253 0158 8827      		clr r24
 254 015a 9F78      		andi r25,143
 255 015c E530      		cpi r30,lo8(5)
 256 015e 04F0      		brlt .L27
 257 0160 E5E0      		ldi r30,lo8(5)
 258               	.L27:
 259 0162 0E2E      		mov __tmp_reg__,r30
 260 0164 000C      		lsl r0
 261 0166 FF0B      		sbc r31,r31
 262 0168 E050      		subi r30,lo8(-(bits+27))
 263 016a F040      		sbci r31,hi8(-(bits+27))
 264               	/* #APP */
 265               	 ;  149 "src/LCD_baomei_bm-8001b.c" 1
 266 016c E491      		lpm r30, Z
 267               		
 268               	 ;  0 "" 2
 269               	/* #NOAPP */
 270 016e 21E0      		ldi r18,lo8(1)
 271 0170 30E0      		ldi r19,0
 272 0172 00C0      		rjmp 2f
 273               		1:
 274 0174 220F      		lsl r18
 275 0176 331F      		rol r19
 276               		2:
 277 0178 EA95      		dec r30
 278 017a 02F4      		brpl 1b
 279 017c 822B      		or r24,r18
 280 017e 932B      		or r25,r19
 281 0180 9093 0000 		sts data+3+1,r25
 282 0184 8093 0000 		sts data+3,r24
 283 0188 0895      		ret
 284               		.size	TrimElev, .-TrimElev
 285               	.global	TrimEler
 286               		.type	TrimEler, @function
 287               	TrimEler:
 288               	/* prologue: function */
 289               	/* frame size = 0 */
 290               	/* stack size = 0 */
 291               	.L__stack_usage = 0
 292 018a E82F      		mov r30,r24
 293 018c 8091 0000 		lds r24,data+6
 294 0190 9091 0000 		lds r25,data+6+1
 295 0194 807F      		andi r24,240
 296 0196 9870      		andi r25,8
 297 0198 E530      		cpi r30,lo8(5)
 298 019a 04F0      		brlt .L30
 299 019c E5E0      		ldi r30,lo8(5)
 300               	.L30:
 301 019e 0E2E      		mov __tmp_reg__,r30
 302 01a0 000C      		lsl r0
 303 01a2 FF0B      		sbc r31,r31
 304 01a4 E050      		subi r30,lo8(-(bits+38))
 305 01a6 F040      		sbci r31,hi8(-(bits+38))
 306               	/* #APP */
 307               	 ;  155 "src/LCD_baomei_bm-8001b.c" 1
 308 01a8 E491      		lpm r30, Z
 309               		
 310               	 ;  0 "" 2
 311               	/* #NOAPP */
 312 01aa 21E0      		ldi r18,lo8(1)
 313 01ac 30E0      		ldi r19,0
 314 01ae 00C0      		rjmp 2f
 315               		1:
 316 01b0 220F      		lsl r18
 317 01b2 331F      		rol r19
 318               		2:
 319 01b4 EA95      		dec r30
 320 01b6 02F4      		brpl 1b
 321 01b8 822B      		or r24,r18
 322 01ba 932B      		or r25,r19
 323 01bc 9093 0000 		sts data+6+1,r25
 324 01c0 8093 0000 		sts data+6,r24
 325 01c4 0895      		ret
 326               		.size	TrimEler, .-TrimEler
 327               	.global	SetMode
 328               		.type	SetMode, @function
 329               	SetMode:
 330               	/* prologue: function */
 331               	/* frame size = 0 */
 332               	/* stack size = 0 */
 333               	.L__stack_usage = 0
 334 01c6 9091 0000 		lds r25,data+14
 335 01ca 9F7C      		andi r25,lo8(-49)
 336 01cc 8130      		cpi r24,lo8(1)
 337 01ce 01F0      		breq .L34
 338 01d0 80E1      		ldi r24,lo8(16)
 339 01d2 00C0      		rjmp .L33
 340               	.L34:
 341 01d4 80E2      		ldi r24,lo8(32)
 342               	.L33:
 343 01d6 982B      		or r25,r24
 344 01d8 9093 0000 		sts data+14,r25
 345 01dc 0895      		ret
 346               		.size	SetMode, .-SetMode
 347               	.global	ThrotleRight
 348               		.type	ThrotleRight, @function
 349               	ThrotleRight:
 350               	/* prologue: function */
 351               	/* frame size = 0 */
 352               	/* stack size = 0 */
 353               	.L__stack_usage = 0
 354 01de 2091 0000 		lds r18,data+5
 355 01e2 3091 0000 		lds r19,data+5+1
 356 01e6 2078      		andi r18,128
 357 01e8 3F70      		andi r19,15
 358 01ea 8C30      		cpi r24,lo8(12)
 359 01ec 04F0      		brlt .L36
 360 01ee 8BE0      		ldi r24,lo8(11)
 361               	.L36:
 362 01f0 40E0      		ldi r20,0
 363 01f2 50E0      		ldi r21,0
 364 01f4 61E0      		ldi r22,lo8(1)
 365 01f6 70E0      		ldi r23,0
 366               	.L37:
 367 01f8 4817      		cp r20,r24
 368 01fa 04F4      		brge .L39
 369 01fc FA01      		movw r30,r20
 370 01fe E050      		subi r30,lo8(-(bits+44))
 371 0200 F040      		sbci r31,hi8(-(bits+44))
 372               	/* #APP */
 373               	 ;  171 "src/LCD_baomei_bm-8001b.c" 1
 374 0202 E491      		lpm r30, Z
 375               		
 376               	 ;  0 "" 2
 377               	/* #NOAPP */
 378 0204 DB01      		movw r26,r22
 379 0206 00C0      		rjmp 2f
 380               		1:
 381 0208 AA0F      		lsl r26
 382 020a BB1F      		rol r27
 383               		2:
 384 020c EA95      		dec r30
 385 020e 02F4      		brpl 1b
 386 0210 2A2B      		or r18,r26
 387 0212 3B2B      		or r19,r27
 388 0214 4F5F      		subi r20,-1
 389 0216 5F4F      		sbci r21,-1
 390 0218 00C0      		rjmp .L37
 391               	.L39:
 392 021a 3093 0000 		sts data+5+1,r19
 393 021e 2093 0000 		sts data+5,r18
 394 0222 0895      		ret
 395               		.size	ThrotleRight, .-ThrotleRight
 396               	.global	ThrotleLeft
 397               		.type	ThrotleLeft, @function
 398               	ThrotleLeft:
 399               	/* prologue: function */
 400               	/* frame size = 0 */
 401               	/* stack size = 0 */
 402               	.L__stack_usage = 0
 403 0224 2091 0000 		lds r18,data+12
 404 0228 3091 0000 		lds r19,data+12+1
 405 022c 207F      		andi r18,240
 406 022e 3870      		andi r19,8
 407 0230 8C30      		cpi r24,lo8(12)
 408 0232 04F0      		brlt .L41
 409 0234 8BE0      		ldi r24,lo8(11)
 410               	.L41:
 411 0236 40E0      		ldi r20,0
 412 0238 50E0      		ldi r21,0
 413 023a 61E0      		ldi r22,lo8(1)
 414 023c 70E0      		ldi r23,0
 415               	.L42:
 416 023e 4817      		cp r20,r24
 417 0240 04F4      		brge .L44
 418 0242 FA01      		movw r30,r20
 419 0244 E050      		subi r30,lo8(-(bits+55))
 420 0246 F040      		sbci r31,hi8(-(bits+55))
 421               	/* #APP */
 422               	 ;  180 "src/LCD_baomei_bm-8001b.c" 1
 423 0248 E491      		lpm r30, Z
 424               		
 425               	 ;  0 "" 2
 426               	/* #NOAPP */
 427 024a DB01      		movw r26,r22
 428 024c 00C0      		rjmp 2f
 429               		1:
 430 024e AA0F      		lsl r26
 431 0250 BB1F      		rol r27
 432               		2:
 433 0252 EA95      		dec r30
 434 0254 02F4      		brpl 1b
 435 0256 2A2B      		or r18,r26
 436 0258 3B2B      		or r19,r27
 437 025a 4F5F      		subi r20,-1
 438 025c 5F4F      		sbci r21,-1
 439 025e 00C0      		rjmp .L42
 440               	.L44:
 441 0260 3093 0000 		sts data+12+1,r19
 442 0264 2093 0000 		sts data+12,r18
 443 0268 0895      		ret
 444               		.size	ThrotleLeft, .-ThrotleLeft
 445               	.global	Elevator
 446               		.type	Elevator, @function
 447               	Elevator:
 448               	/* prologue: function */
 449               	/* frame size = 0 */
 450               	/* stack size = 0 */
 451               	.L__stack_usage = 0
 452 026a 9091 0000 		lds r25,data+9
 453 026e 9F70      		andi r25,lo8(15)
 454 0270 282F      		mov r18,r24
 455 0272 082E      		mov __tmp_reg__,r24
 456 0274 000C      		lsl r0
 457 0276 330B      		sbc r19,r19
 458 0278 40E8      		ldi r20,lo8(-128)
 459 027a 87FF      		sbrs r24,7
 460 027c 00C0      		rjmp .L55
 461 027e 85E0      		ldi r24,lo8(5)
 462 0280 2C5F      		subi r18,-4
 463 0282 3F4F      		sbci r19,-1
 464 0284 61E0      		ldi r22,lo8(1)
 465 0286 70E0      		ldi r23,0
 466 0288 00C0      		rjmp .L47
 467               	.L55:
 468 028a 85E0      		ldi r24,lo8(5)
 469 028c 2B5F      		subi r18,-5
 470 028e 3F4F      		sbci r19,-1
 471 0290 61E0      		ldi r22,lo8(1)
 472 0292 70E0      		ldi r23,0
 473               	.L46:
 474 0294 E82F      		mov r30,r24
 475 0296 082E      		mov __tmp_reg__,r24
 476 0298 000C      		lsl r0
 477 029a FF0B      		sbc r31,r31
 478 029c 2E17      		cp r18,r30
 479 029e 3F07      		cpc r19,r31
 480 02a0 04F4      		brge .+2
 481 02a2 00C0      		rjmp .L56
 482 02a4 E050      		subi r30,lo8(-(elevator_pos_e))
 483 02a6 F040      		sbci r31,hi8(-(elevator_pos_e))
 484 02a8 8730      		cpi r24,lo8(7)
 485 02aa 04F0      		brlt .L48
 486               	/* #APP */
 487               	 ;  197 "src/LCD_baomei_bm-8001b.c" 1
 488 02ac E491      		lpm r30, Z
 489               		
 490               	 ;  0 "" 2
 491               	/* #NOAPP */
 492 02ae DB01      		movw r26,r22
 493 02b0 00C0      		rjmp 2f
 494               		1:
 495 02b2 AA0F      		lsl r26
 496 02b4 BB1F      		rol r27
 497               		2:
 498 02b6 EA95      		dec r30
 499 02b8 02F4      		brpl 1b
 500 02ba 9A2B      		or r25,r26
 501 02bc 00C0      		rjmp .L49
 502               	.L48:
 503               	/* #APP */
 504               	 ;  199 "src/LCD_baomei_bm-8001b.c" 1
 505 02be E491      		lpm r30, Z
 506               		
 507               	 ;  0 "" 2
 508               	/* #NOAPP */
 509 02c0 DB01      		movw r26,r22
 510 02c2 00C0      		rjmp 2f
 511               		1:
 512 02c4 AA0F      		lsl r26
 513 02c6 BB1F      		rol r27
 514               		2:
 515 02c8 EA95      		dec r30
 516 02ca 02F4      		brpl 1b
 517 02cc 4A2B      		or r20,r26
 518               	.L49:
 519 02ce 8F5F      		subi r24,lo8(-(1))
 520 02d0 00C0      		rjmp .L46
 521               	.L53:
 522 02d2 E050      		subi r30,lo8(-(elevator_pos_e))
 523 02d4 F040      		sbci r31,hi8(-(elevator_pos_e))
 524 02d6 8730      		cpi r24,lo8(7)
 525 02d8 04F0      		brlt .L51
 526               	/* #APP */
 527               	 ;  205 "src/LCD_baomei_bm-8001b.c" 1
 528 02da E491      		lpm r30, Z
 529               		
 530               	 ;  0 "" 2
 531               	/* #NOAPP */
 532 02dc DB01      		movw r26,r22
 533 02de 00C0      		rjmp 2f
 534               		1:
 535 02e0 AA0F      		lsl r26
 536 02e2 BB1F      		rol r27
 537               		2:
 538 02e4 EA95      		dec r30
 539 02e6 02F4      		brpl 1b
 540 02e8 9A2B      		or r25,r26
 541               	.L52:
 542 02ea 8150      		subi r24,lo8(-(-1))
 543               	.L47:
 544 02ec E82F      		mov r30,r24
 545 02ee 082E      		mov __tmp_reg__,r24
 546 02f0 000C      		lsl r0
 547 02f2 FF0B      		sbc r31,r31
 548 02f4 2E17      		cp r18,r30
 549 02f6 3F07      		cpc r19,r31
 550 02f8 04F0      		brlt .L53
 551 02fa 00C0      		rjmp .L56
 552               	.L51:
 553               	/* #APP */
 554               	 ;  207 "src/LCD_baomei_bm-8001b.c" 1
 555 02fc E491      		lpm r30, Z
 556               		
 557               	 ;  0 "" 2
 558               	/* #NOAPP */
 559 02fe DB01      		movw r26,r22
 560 0300 00C0      		rjmp 2f
 561               		1:
 562 0302 AA0F      		lsl r26
 563 0304 BB1F      		rol r27
 564               		2:
 565 0306 EA95      		dec r30
 566 0308 02F4      		brpl 1b
 567 030a 4A2B      		or r20,r26
 568 030c 00C0      		rjmp .L52
 569               	.L56:
 570 030e 9093 0000 		sts data+9,r25
 571 0312 4093 0000 		sts data+10,r20
 572 0316 0895      		ret
 573               		.size	Elevator, .-Elevator
 574               	.global	Eleron
 575               		.type	Eleron, @function
 576               	Eleron:
 577               	/* prologue: function */
 578               	/* frame size = 0 */
 579               	/* stack size = 0 */
 580               	.L__stack_usage = 0
 581 0318 9091 0000 		lds r25,data+1
 582 031c 9770      		andi r25,lo8(7)
 583 031e 9093 0000 		sts data+1,r25
 584 0322 3091 0000 		lds r19,data+9
 585 0326 307F      		andi r19,lo8(-16)
 586 0328 3093 0000 		sts data+9,r19
 587 032c 2091 0000 		lds r18,data+8
 588 0330 277F      		andi r18,lo8(-9)
 589 0332 2093 0000 		sts data+8,r18
 590 0336 482F      		mov r20,r24
 591 0338 082E      		mov __tmp_reg__,r24
 592 033a 000C      		lsl r0
 593 033c 550B      		sbc r21,r21
 594 033e 87FF      		sbrs r24,7
 595 0340 00C0      		rjmp .L65
 596 0342 85E0      		ldi r24,lo8(5)
 597 0344 4C5F      		subi r20,-4
 598 0346 5F4F      		sbci r21,-1
 599 0348 21E0      		ldi r18,lo8(1)
 600 034a 30E0      		ldi r19,0
 601 034c 00C0      		rjmp .L59
 602               	.L65:
 603 034e 85E0      		ldi r24,lo8(5)
 604 0350 4B5F      		subi r20,-5
 605 0352 5F4F      		sbci r21,-1
 606 0354 61E0      		ldi r22,lo8(1)
 607 0356 70E0      		ldi r23,0
 608               	.L58:
 609 0358 E82F      		mov r30,r24
 610 035a 082E      		mov __tmp_reg__,r24
 611 035c 000C      		lsl r0
 612 035e FF0B      		sbc r31,r31
 613 0360 4E17      		cp r20,r30
 614 0362 5F07      		cpc r21,r31
 615 0364 04F0      		brlt .L66
 616 0366 9AEF      		ldi r25,lo8(-6)
 617 0368 980F      		add r25,r24
 618 036a 9430      		cpi r25,lo8(4)
 619 036c 00F4      		brsh .L60
 620 036e E050      		subi r30,lo8(-(eleron_pos_e))
 621 0370 F040      		sbci r31,hi8(-(eleron_pos_e))
 622               	/* #APP */
 623               	 ;  224 "src/LCD_baomei_bm-8001b.c" 1
 624 0372 E491      		lpm r30, Z
 625               		
 626               	 ;  0 "" 2
 627               	/* #NOAPP */
 628 0374 DB01      		movw r26,r22
 629 0376 00C0      		rjmp 2f
 630               		1:
 631 0378 AA0F      		lsl r26
 632 037a BB1F      		rol r27
 633               		2:
 634 037c EA95      		dec r30
 635 037e 02F4      		brpl 1b
 636 0380 3A2B      		or r19,r26
 637 0382 00C0      		rjmp .L61
 638               	.L60:
 639 0384 8A30      		cpi r24,lo8(10)
 640 0386 01F4      		brne .L61
 641 0388 E050      		subi r30,lo8(-(eleron_pos_e))
 642 038a F040      		sbci r31,hi8(-(eleron_pos_e))
 643               	/* #APP */
 644               	 ;  226 "src/LCD_baomei_bm-8001b.c" 1
 645 038c E491      		lpm r30, Z
 646               		
 647               	 ;  0 "" 2
 648               	/* #NOAPP */
 649 038e DB01      		movw r26,r22
 650 0390 00C0      		rjmp 2f
 651               		1:
 652 0392 AA0F      		lsl r26
 653 0394 BB1F      		rol r27
 654               		2:
 655 0396 EA95      		dec r30
 656 0398 02F4      		brpl 1b
 657 039a 2A2B      		or r18,r26
 658               	.L61:
 659 039c 8F5F      		subi r24,lo8(-(1))
 660 039e 00C0      		rjmp .L58
 661               	.L66:
 662 03a0 3093 0000 		sts data+9,r19
 663 03a4 2093 0000 		sts data+8,r18
 664 03a8 0895      		ret
 665               	.L59:
 666 03aa E82F      		mov r30,r24
 667 03ac 082E      		mov __tmp_reg__,r24
 668 03ae 000C      		lsl r0
 669 03b0 FF0B      		sbc r31,r31
 670 03b2 4E17      		cp r20,r30
 671 03b4 5F07      		cpc r21,r31
 672 03b6 04F4      		brge .L67
 673 03b8 E050      		subi r30,lo8(-(eleron_pos_e))
 674 03ba F040      		sbci r31,hi8(-(eleron_pos_e))
 675               	/* #APP */
 676               	 ;  231 "src/LCD_baomei_bm-8001b.c" 1
 677 03bc E491      		lpm r30, Z
 678               		
 679               	 ;  0 "" 2
 680               	/* #NOAPP */
 681 03be B901      		movw r22,r18
 682 03c0 00C0      		rjmp 2f
 683               		1:
 684 03c2 660F      		lsl r22
 685               		2:
 686 03c4 EA95      		dec r30
 687 03c6 02F4      		brpl 1b
 688 03c8 962B      		or r25,r22
 689 03ca 8150      		subi r24,lo8(-(-1))
 690 03cc 00C0      		rjmp .L59
 691               	.L67:
 692 03ce 9093 0000 		sts data+1,r25
 693 03d2 0895      		ret
 694               		.size	Eleron, .-Eleron
 695               	.global	Rudder
 696               		.type	Rudder, @function
 697               	Rudder:
 698               	/* prologue: function */
 699               	/* frame size = 0 */
 700               	/* stack size = 0 */
 701               	.L__stack_usage = 0
 702 03d4 4091 0000 		lds r20,data+8
 703 03d8 4870      		andi r20,lo8(8)
 704 03da 4093 0000 		sts data+8,r20
 705 03de 2091 0000 		lds r18,data+1
 706 03e2 287F      		andi r18,lo8(-8)
 707 03e4 2093 0000 		sts data+1,r18
 708 03e8 3091 0000 		lds r19,data+2
 709 03ec 3F70      		andi r19,lo8(15)
 710 03ee 3093 0000 		sts data+2,r19
 711 03f2 8730      		cpi r24,lo8(7)
 712 03f4 04F4      		brge .L77
 713 03f6 87FD      		sbrc r24,7
 714 03f8 00C0      		rjmp .L78
 715 03fa 00C0      		rjmp .L69
 716               	.L77:
 717 03fc 87E0      		ldi r24,lo8(7)
 718               	.L69:
 719 03fe 27E0      		ldi r18,lo8(7)
 720 0400 082E      		mov __tmp_reg__,r24
 721 0402 000C      		lsl r0
 722 0404 990B      		sbc r25,r25
 723 0406 0796      		adiw r24,7
 724 0408 61E0      		ldi r22,lo8(1)
 725 040a 70E0      		ldi r23,0
 726               	.L71:
 727 040c E22F      		mov r30,r18
 728 040e 022E      		mov __tmp_reg__,r18
 729 0410 000C      		lsl r0
 730 0412 FF0B      		sbc r31,r31
 731 0414 8E17      		cp r24,r30
 732 0416 9F07      		cpc r25,r31
 733 0418 04F0      		brlt .L79
 734 041a E050      		subi r30,lo8(-(rudder_pos_e))
 735 041c F040      		sbci r31,hi8(-(rudder_pos_e))
 736               	/* #APP */
 737               	 ;  248 "src/LCD_baomei_bm-8001b.c" 1
 738 041e E491      		lpm r30, Z
 739               		
 740               	 ;  0 "" 2
 741               	/* #NOAPP */
 742 0420 DB01      		movw r26,r22
 743 0422 00C0      		rjmp 2f
 744               		1:
 745 0424 AA0F      		lsl r26
 746 0426 BB1F      		rol r27
 747               		2:
 748 0428 EA95      		dec r30
 749 042a 02F4      		brpl 1b
 750 042c 4A2B      		or r20,r26
 751 042e 2F5F      		subi r18,lo8(-(1))
 752 0430 00C0      		rjmp .L71
 753               	.L79:
 754 0432 4093 0000 		sts data+8,r20
 755 0436 0895      		ret
 756               	.L78:
 757 0438 46E0      		ldi r20,lo8(6)
 758 043a 082E      		mov __tmp_reg__,r24
 759 043c 000C      		lsl r0
 760 043e 990B      		sbc r25,r25
 761 0440 0596      		adiw r24,5
 762 0442 61E0      		ldi r22,lo8(1)
 763 0444 70E0      		ldi r23,0
 764               	.L70:
 765 0446 E42F      		mov r30,r20
 766 0448 042E      		mov __tmp_reg__,r20
 767 044a 000C      		lsl r0
 768 044c FF0B      		sbc r31,r31
 769 044e 8E17      		cp r24,r30
 770 0450 9F07      		cpc r25,r31
 771 0452 04F4      		brge .L80
 772 0454 E050      		subi r30,lo8(-(rudder_pos_e))
 773 0456 F040      		sbci r31,hi8(-(rudder_pos_e))
 774 0458 4330      		cpi r20,lo8(3)
 775 045a 04F0      		brlt .L73
 776               	/* #APP */
 777               	 ;  253 "src/LCD_baomei_bm-8001b.c" 1
 778 045c E491      		lpm r30, Z
 779               		
 780               	 ;  0 "" 2
 781               	/* #NOAPP */
 782 045e DB01      		movw r26,r22
 783 0460 00C0      		rjmp 2f
 784               		1:
 785 0462 AA0F      		lsl r26
 786 0464 BB1F      		rol r27
 787               		2:
 788 0466 EA95      		dec r30
 789 0468 02F4      		brpl 1b
 790 046a 3A2B      		or r19,r26
 791 046c 00C0      		rjmp .L74
 792               	.L73:
 793               	/* #APP */
 794               	 ;  255 "src/LCD_baomei_bm-8001b.c" 1
 795 046e E491      		lpm r30, Z
 796               		
 797               	 ;  0 "" 2
 798               	/* #NOAPP */
 799 0470 DB01      		movw r26,r22
 800 0472 00C0      		rjmp 2f
 801               		1:
 802 0474 AA0F      		lsl r26
 803 0476 BB1F      		rol r27
 804               		2:
 805 0478 EA95      		dec r30
 806 047a 02F4      		brpl 1b
 807 047c 2A2B      		or r18,r26
 808               	.L74:
 809 047e 4150      		subi r20,lo8(-(-1))
 810 0480 00C0      		rjmp .L70
 811               	.L80:
 812 0482 3093 0000 		sts data+2,r19
 813 0486 2093 0000 		sts data+1,r18
 814 048a 0895      		ret
 815               		.size	Rudder, .-Rudder
 816               	.global	DoubleRate
 817               		.type	DoubleRate, @function
 818               	DoubleRate:
 819               	/* prologue: function */
 820               	/* frame size = 0 */
 821               	/* stack size = 0 */
 822               	.L__stack_usage = 0
 823 048c 9091 0000 		lds r25,data+2
 824 0490 997F      		andi r25,lo8(-7)
 825 0492 8111      		cpse r24,__zero_reg__
 826 0494 00C0      		rjmp .L83
 827 0496 84E0      		ldi r24,lo8(4)
 828 0498 00C0      		rjmp .L82
 829               	.L83:
 830 049a 82E0      		ldi r24,lo8(2)
 831               	.L82:
 832 049c 982B      		or r25,r24
 833 049e 9093 0000 		sts data+2,r25
 834 04a2 0895      		ret
 835               		.size	DoubleRate, .-DoubleRate
 836               	.global	Bat
 837               		.type	Bat, @function
 838               	Bat:
 839               	/* prologue: function */
 840               	/* frame size = 0 */
 841               	/* stack size = 0 */
 842               	.L__stack_usage = 0
 843 04a4 9091 0000 		lds r25,data+4
 844 04a8 907F      		andi r25,lo8(-16)
 845 04aa 8230      		cpi r24,lo8(2)
 846 04ac 01F0      		breq .L86
 847 04ae 04F4      		brge .L87
 848 04b0 8130      		cpi r24,lo8(1)
 849 04b2 01F4      		brne .L92
 850 04b4 9860      		ori r25,lo8(8)
 851 04b6 00C0      		rjmp .L92
 852               	.L87:
 853 04b8 8330      		cpi r24,lo8(3)
 854 04ba 01F0      		breq .L89
 855 04bc 8430      		cpi r24,lo8(4)
 856 04be 01F4      		brne .L92
 857 04c0 9F60      		ori r25,lo8(15)
 858 04c2 00C0      		rjmp .L92
 859               	.L86:
 860 04c4 9C60      		ori r25,lo8(12)
 861 04c6 00C0      		rjmp .L92
 862               	.L89:
 863 04c8 9E60      		ori r25,lo8(14)
 864               	.L92:
 865 04ca 9093 0000 		sts data+4,r25
 866 04ce 0895      		ret
 867               		.size	Bat, .-Bat
 868               	.global	Ant
 869               		.type	Ant, @function
 870               	Ant:
 871               	/* prologue: function */
 872               	/* frame size = 0 */
 873               	/* stack size = 0 */
 874               	.L__stack_usage = 0
 875 04d0 9091 0000 		lds r25,data+14
 876 04d4 9F7B      		andi r25,lo8(-65)
 877 04d6 8111      		cpse r24,__zero_reg__
 878 04d8 80E4      		ldi r24,lo8(64)
 879               	.L94:
 880 04da 982B      		or r25,r24
 881 04dc 9093 0000 		sts data+14,r25
 882 04e0 0895      		ret
 883               		.size	Ant, .-Ant
 884               	.global	Quadro
 885               		.type	Quadro, @function
 886               	Quadro:
 887               	/* prologue: function */
 888               	/* frame size = 0 */
 889               	/* stack size = 0 */
 890               	.L__stack_usage = 0
 891 04e2 9091 0000 		lds r25,data+2
 892 04e6 977F      		andi r25,lo8(-9)
 893 04e8 8111      		cpse r24,__zero_reg__
 894 04ea 88E0      		ldi r24,lo8(8)
 895               	.L97:
 896 04ec 982B      		or r25,r24
 897 04ee 9093 0000 		sts data+2,r25
 898 04f2 0895      		ret
 899               		.size	Quadro, .-Quadro
 900               	.global	rudder_pos_e
 901               		.section	.progmem.data,"a",@progbits
 902               		.type	rudder_pos_e, @object
 903               		.size	rudder_pos_e, 14
 904               	rudder_pos_e:
 905 0000 00        		.byte	0
 906 0001 01        		.byte	1
 907 0002 02        		.byte	2
 908 0003 04        		.byte	4
 909 0004 05        		.byte	5
 910 0005 06        		.byte	6
 911 0006 07        		.byte	7
 912 0007 07        		.byte	7
 913 0008 06        		.byte	6
 914 0009 05        		.byte	5
 915 000a 04        		.byte	4
 916 000b 02        		.byte	2
 917 000c 01        		.byte	1
 918 000d 00        		.byte	0
 919               	.global	eleron_pos_e
 920               		.type	eleron_pos_e, @object
 921               		.size	eleron_pos_e, 11
 922               	eleron_pos_e:
 923 000e 03        		.byte	3
 924 000f 07        		.byte	7
 925 0010 06        		.byte	6
 926 0011 05        		.byte	5
 927 0012 04        		.byte	4
 928 0013 04        		.byte	4
 929 0014 00        		.byte	0
 930 0015 01        		.byte	1
 931 0016 02        		.byte	2
 932 0017 03        		.byte	3
 933 0018 03        		.byte	3
 934               	.global	elevator_pos_e
 935               		.type	elevator_pos_e, @object
 936               		.size	elevator_pos_e, 11
 937               	elevator_pos_e:
 938 0019 03        		.byte	3
 939 001a 02        		.byte	2
 940 001b 01        		.byte	1
 941 001c 00        		.byte	0
 942 001d 06        		.byte	6
 943 001e 04        		.byte	4
 944 001f 05        		.byte	5
 945 0020 04        		.byte	4
 946 0021 05        		.byte	5
 947 0022 06        		.byte	6
 948 0023 07        		.byte	7
 949               	.global	bits
 950               		.type	bits, @object
 951               		.size	bits, 66
 952               	bits:
 953 0024 0B        		.byte	11
 954 0025 0A        		.byte	10
 955 0026 09        		.byte	9
 956 0027 08        		.byte	8
 957 0028 0C        		.byte	12
 958 0029 0D        		.byte	13
 959 002a 0E        		.byte	14
 960 002b 0F        		.byte	15
 961 002c 02        		.byte	2
 962 002d 01        		.byte	1
 963 002e 00        		.byte	0
 964 002f 0F        		.byte	15
 965 0030 0E        		.byte	14
 966 0031 0D        		.byte	13
 967 0032 0C        		.byte	12
 968 0033 00        		.byte	0
 969 0034 01        		.byte	1
 970 0035 02        		.byte	2
 971 0036 03        		.byte	3
 972 0037 06        		.byte	6
 973 0038 05        		.byte	5
 974 0039 04        		.byte	4
 975 003a 07        		.byte	7
 976 003b 06        		.byte	6
 977 003c 05        		.byte	5
 978 003d 04        		.byte	4
 979 003e 00        		.byte	0
 980 003f 01        		.byte	1
 981 0040 02        		.byte	2
 982 0041 03        		.byte	3
 983 0042 0E        		.byte	14
 984 0043 0D        		.byte	13
 985 0044 0C        		.byte	12
 986 0045 08        		.byte	8
 987 0046 09        		.byte	9
 988 0047 0A        		.byte	10
 989 0048 0F        		.byte	15
 990 0049 0E        		.byte	14
 991 004a 0D        		.byte	13
 992 004b 0C        		.byte	12
 993 004c 00        		.byte	0
 994 004d 01        		.byte	1
 995 004e 02        		.byte	2
 996 004f 03        		.byte	3
 997 0050 0F        		.byte	15
 998 0051 0E        		.byte	14
 999 0052 0D        		.byte	13
 1000 0053 0C        		.byte	12
 1001 0054 00        		.byte	0
 1002 0055 01        		.byte	1
 1003 0056 02        		.byte	2
 1004 0057 03        		.byte	3
 1005 0058 06        		.byte	6
 1006 0059 05        		.byte	5
 1007 005a 04        		.byte	4
 1008 005b 03        		.byte	3
 1009 005c 02        		.byte	2
 1010 005d 01        		.byte	1
 1011 005e 00        		.byte	0
 1012 005f 0C        		.byte	12
 1013 0060 0D        		.byte	13
 1014 0061 0E        		.byte	14
 1015 0062 0F        		.byte	15
 1016 0063 0A        		.byte	10
 1017 0064 09        		.byte	9
 1018 0065 08        		.byte	8
 1019               	.global	init
 1020               		.type	init, @object
 1021               		.size	init, 8
 1022               	init:
 1023 0066 52        		.byte	82
 1024 0067 30        		.byte	48
 1025 0068 00        		.byte	0
 1026 0069 0A        		.byte	10
 1027 006a 02        		.byte	2
 1028 006b 06        		.byte	6
 1029 006c C0        		.byte	-64
 1030 006d 10        		.byte	16
 1031               	.global	data
 1032               		.data
 1033               		.type	data, @object
 1034               		.size	data, 16
 1035               	data:
 1036 0000 00        		.byte	0
 1037 0001 00        		.byte	0
 1038 0002 09        		.byte	9
 1039 0003 02        		.byte	2
 1040 0004 80        		.byte	-128
 1041 0005 80        		.byte	-128
 1042 0006 00        		.byte	0
 1043 0007 28        		.byte	40
 1044 0008 00        		.byte	0
 1045 0009 00        		.byte	0
 1046 000a 90        		.byte	-112
 1047 000b 82        		.byte	-126
 1048 000c 00        		.byte	0
 1049 000d 08        		.byte	8
 1050 000e 88        		.byte	-120
 1051 000f 20        		.byte	32
 1052               		.ident	"GCC: (GNU) 5.4.0"
 1053               	.global __do_copy_data
DEFINED SYMBOLS
                            *ABS*:0000000000000000 LCD_baomei_bm-8001b.c
     /tmp/ccmVJqLt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccmVJqLt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccmVJqLt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccmVJqLt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccmVJqLt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccmVJqLt.s:10     .text:0000000000000000 SPI_Send
     /tmp/ccmVJqLt.s:14     *ABS*:0000000000000000 .L__stack_usage
     /tmp/ccmVJqLt.s:17     .text:0000000000000004 .L2
     /tmp/ccmVJqLt.s:40     .text:0000000000000028 .L7
     /tmp/ccmVJqLt.s:34     .text:0000000000000020 .L3
     /tmp/ccmVJqLt.s:36     .text:0000000000000022 .L4
     /tmp/ccmVJqLt.s:46     .text:000000000000002a LCD_Init
     /tmp/ccmVJqLt.s:1022   .progmem.data:0000000000000066 init
     /tmp/ccmVJqLt.s:60     .text:000000000000003c .L9
     /tmp/ccmVJqLt.s:1035   .data:0000000000000000 data
     /tmp/ccmVJqLt.s:90     .text:0000000000000074 .L10
     /tmp/ccmVJqLt.s:99     .text:0000000000000086 .L13
     /tmp/ccmVJqLt.s:111    .text:0000000000000094 LCD_Update
     /tmp/ccmVJqLt.s:127    .text:00000000000000ae .L15
     /tmp/ccmVJqLt.s:143    .text:00000000000000c6 limit_min_max
     /tmp/ccmVJqLt.s:151    .text:00000000000000cc .L18
     /tmp/ccmVJqLt.s:155    .text:00000000000000d2 .L19
     /tmp/ccmVJqLt.s:161    .text:00000000000000d6 TrimRudder
     /tmp/ccmVJqLt.s:174    .text:00000000000000ea .L21
     /tmp/ccmVJqLt.s:952    .progmem.data:0000000000000024 bits
     /tmp/ccmVJqLt.s:203    .text:0000000000000112 TrimThrottle
     /tmp/ccmVJqLt.s:216    .text:0000000000000126 .L24
     /tmp/ccmVJqLt.s:245    .text:000000000000014e TrimElev
     /tmp/ccmVJqLt.s:258    .text:0000000000000162 .L27
     /tmp/ccmVJqLt.s:287    .text:000000000000018a TrimEler
     /tmp/ccmVJqLt.s:300    .text:000000000000019e .L30
     /tmp/ccmVJqLt.s:329    .text:00000000000001c6 SetMode
     /tmp/ccmVJqLt.s:340    .text:00000000000001d4 .L34
     /tmp/ccmVJqLt.s:342    .text:00000000000001d6 .L33
     /tmp/ccmVJqLt.s:349    .text:00000000000001de ThrotleRight
     /tmp/ccmVJqLt.s:361    .text:00000000000001f0 .L36
     /tmp/ccmVJqLt.s:366    .text:00000000000001f8 .L37
     /tmp/ccmVJqLt.s:391    .text:000000000000021a .L39
     /tmp/ccmVJqLt.s:398    .text:0000000000000224 ThrotleLeft
     /tmp/ccmVJqLt.s:410    .text:0000000000000236 .L41
     /tmp/ccmVJqLt.s:415    .text:000000000000023e .L42
     /tmp/ccmVJqLt.s:440    .text:0000000000000260 .L44
     /tmp/ccmVJqLt.s:447    .text:000000000000026a Elevator
     /tmp/ccmVJqLt.s:467    .text:000000000000028a .L55
     /tmp/ccmVJqLt.s:543    .text:00000000000002ec .L47
     /tmp/ccmVJqLt.s:473    .text:0000000000000294 .L46
     /tmp/ccmVJqLt.s:569    .text:000000000000030e .L56
     /tmp/ccmVJqLt.s:937    .progmem.data:0000000000000019 elevator_pos_e
     /tmp/ccmVJqLt.s:502    .text:00000000000002be .L48
     /tmp/ccmVJqLt.s:518    .text:00000000000002ce .L49
     /tmp/ccmVJqLt.s:521    .text:00000000000002d2 .L53
     /tmp/ccmVJqLt.s:552    .text:00000000000002fc .L51
     /tmp/ccmVJqLt.s:541    .text:00000000000002ea .L52
     /tmp/ccmVJqLt.s:576    .text:0000000000000318 Eleron
     /tmp/ccmVJqLt.s:602    .text:000000000000034e .L65
     /tmp/ccmVJqLt.s:665    .text:00000000000003aa .L59
     /tmp/ccmVJqLt.s:608    .text:0000000000000358 .L58
     /tmp/ccmVJqLt.s:661    .text:00000000000003a0 .L66
     /tmp/ccmVJqLt.s:638    .text:0000000000000384 .L60
     /tmp/ccmVJqLt.s:922    .progmem.data:000000000000000e eleron_pos_e
     /tmp/ccmVJqLt.s:658    .text:000000000000039c .L61
     /tmp/ccmVJqLt.s:691    .text:00000000000003ce .L67
     /tmp/ccmVJqLt.s:697    .text:00000000000003d4 Rudder
     /tmp/ccmVJqLt.s:716    .text:00000000000003fc .L77
     /tmp/ccmVJqLt.s:756    .text:0000000000000438 .L78
     /tmp/ccmVJqLt.s:718    .text:00000000000003fe .L69
     /tmp/ccmVJqLt.s:726    .text:000000000000040c .L71
     /tmp/ccmVJqLt.s:753    .text:0000000000000432 .L79
     /tmp/ccmVJqLt.s:904    .progmem.data:0000000000000000 rudder_pos_e
     /tmp/ccmVJqLt.s:764    .text:0000000000000446 .L70
     /tmp/ccmVJqLt.s:811    .text:0000000000000482 .L80
     /tmp/ccmVJqLt.s:792    .text:000000000000046e .L73
     /tmp/ccmVJqLt.s:808    .text:000000000000047e .L74
     /tmp/ccmVJqLt.s:818    .text:000000000000048c DoubleRate
     /tmp/ccmVJqLt.s:829    .text:000000000000049a .L83
     /tmp/ccmVJqLt.s:831    .text:000000000000049c .L82
     /tmp/ccmVJqLt.s:838    .text:00000000000004a4 Bat
     /tmp/ccmVJqLt.s:859    .text:00000000000004c4 .L86
     /tmp/ccmVJqLt.s:852    .text:00000000000004b8 .L87
     /tmp/ccmVJqLt.s:864    .text:00000000000004ca .L92
     /tmp/ccmVJqLt.s:862    .text:00000000000004c8 .L89
     /tmp/ccmVJqLt.s:870    .text:00000000000004d0 Ant
     /tmp/ccmVJqLt.s:879    .text:00000000000004da .L94
     /tmp/ccmVJqLt.s:886    .text:00000000000004e2 Quadro
     /tmp/ccmVJqLt.s:895    .text:00000000000004ec .L97

UNDEFINED SYMBOLS
__do_copy_data
